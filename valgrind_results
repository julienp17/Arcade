==23262== Memcheck, a memory error detector
==23262== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==23262== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==23262== Command: ./arcade fef
==23262== 
==23262== Conditional jump or move depends on uninitialised value(s)
==23262==    at 0x1D917EF4: arc::Nibbler::moveSnake() (in /home/tristan/delivery/tek2/OOP/arcade/lib/arcade_nibbler.so)
==23262==    by 0x1D917DBC: arc::Nibbler::tick() (in /home/tristan/delivery/tek2/OOP/arcade/lib/arcade_nibbler.so)
==23262==    by 0x405031: arc::Core::gameLoop(arc::IDisplay*) (in /home/tristan/delivery/tek2/OOP/arcade/arcade)
==23262==    by 0x404D00: arc::Core::dispLoop() (in /home/tristan/delivery/tek2/OOP/arcade/arcade)
==23262==    by 0x404C7F: arc::Core::run() (in /home/tristan/delivery/tek2/OOP/arcade/arcade)
==23262==    by 0x4035ED: main (in /home/tristan/delivery/tek2/OOP/arcade/arcade)
==23262== 
==23262== Invalid read of size 8
==23262==    at 0x1D9180B0: arc::Nibbler::findNewTail() (in /home/tristan/delivery/tek2/OOP/arcade/lib/arcade_nibbler.so)
==23262==    by 0x1D917F36: arc::Nibbler::moveSnake() (in /home/tristan/delivery/tek2/OOP/arcade/lib/arcade_nibbler.so)
==23262==    by 0x1D917DBC: arc::Nibbler::tick() (in /home/tristan/delivery/tek2/OOP/arcade/lib/arcade_nibbler.so)
==23262==    by 0x405031: arc::Core::gameLoop(arc::IDisplay*) (in /home/tristan/delivery/tek2/OOP/arcade/arcade)
==23262==    by 0x404D00: arc::Core::dispLoop() (in /home/tristan/delivery/tek2/OOP/arcade/arcade)
==23262==    by 0x404C7F: arc::Core::run() (in /home/tristan/delivery/tek2/OOP/arcade/arcade)
==23262==    by 0x4035ED: main (in /home/tristan/delivery/tek2/OOP/arcade/arcade)
==23262==  Address 0x4e2d758 is 8 bytes before a block of size 104 alloc'd
==23262==    at 0x483880B: malloc (vg_replace_malloc.c:309)
==23262==    by 0x1D91A748: arc::Parser::parseMap(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >) (in /home/tristan/delivery/tek2/OOP/arcade/lib/arcade_nibbler.so)
==23262==    by 0x1D91A369: arc::Parser::Parser(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (in /home/tristan/delivery/tek2/OOP/arcade/lib/arcade_nibbler.so)
==23262==    by 0x1D9176AC: arc::Nibbler::Nibbler() (in /home/tristan/delivery/tek2/OOP/arcade/lib/arcade_nibbler.so)
==23262==    by 0x1D918206: create (in /home/tristan/delivery/tek2/OOP/arcade/lib/arcade_nibbler.so)
==23262==    by 0x40AF12: arc::DLLoader<arc::IGame>::load(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (in /home/tristan/delivery/tek2/OOP/arcade/arcade)
==23262==    by 0x40A029: arc::DLLoader<arc::IGame>::DLLoader(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (in /home/tristan/delivery/tek2/OOP/arcade/arcade)
==23262==    by 0x409182: arc::DLManager<arc::IGame>::loadLibs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&) (in /home/tristan/delivery/tek2/OOP/arcade/arcade)
==23262==    by 0x4083B3: arc::DLManager<arc::IGame>::DLManager(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&) (in /home/tristan/delivery/tek2/OOP/arcade/arcade)
==23262==    by 0x404A96: arc::Core::Core() (in /home/tristan/delivery/tek2/OOP/arcade/arcade)
==23262==    by 0x4035AA: main (in /home/tristan/delivery/tek2/OOP/arcade/arcade)
==23262== 
==23262== Invalid read of size 1
==23262==    at 0x1D9180C0: arc::Nibbler::findNewTail() (in /home/tristan/delivery/tek2/OOP/arcade/lib/arcade_nibbler.so)
==23262==    by 0x1D917F36: arc::Nibbler::moveSnake() (in /home/tristan/delivery/tek2/OOP/arcade/lib/arcade_nibbler.so)
==23262==    by 0x1D917DBC: arc::Nibbler::tick() (in /home/tristan/delivery/tek2/OOP/arcade/lib/arcade_nibbler.so)
==23262==    by 0x405031: arc::Core::gameLoop(arc::IDisplay*) (in /home/tristan/delivery/tek2/OOP/arcade/arcade)
==23262==    by 0x404D00: arc::Core::dispLoop() (in /home/tristan/delivery/tek2/OOP/arcade/arcade)
==23262==    by 0x404C7F: arc::Core::run() (in /home/tristan/delivery/tek2/OOP/arcade/arcade)
==23262==    by 0x4035ED: main (in /home/tristan/delivery/tek2/OOP/arcade/arcade)
==23262==  Address 0x2b2 is not stack'd, malloc'd or (recently) free'd
==23262== 
==23262== 
==23262== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==23262==  Access not within mapped region at address 0x2B2
==23262==    at 0x1D9180C0: arc::Nibbler::findNewTail() (in /home/tristan/delivery/tek2/OOP/arcade/lib/arcade_nibbler.so)
==23262==    by 0x1D917F36: arc::Nibbler::moveSnake() (in /home/tristan/delivery/tek2/OOP/arcade/lib/arcade_nibbler.so)
==23262==    by 0x1D917DBC: arc::Nibbler::tick() (in /home/tristan/delivery/tek2/OOP/arcade/lib/arcade_nibbler.so)
==23262==    by 0x405031: arc::Core::gameLoop(arc::IDisplay*) (in /home/tristan/delivery/tek2/OOP/arcade/arcade)
==23262==    by 0x404D00: arc::Core::dispLoop() (in /home/tristan/delivery/tek2/OOP/arcade/arcade)
==23262==    by 0x404C7F: arc::Core::run() (in /home/tristan/delivery/tek2/OOP/arcade/arcade)
==23262==    by 0x4035ED: main (in /home/tristan/delivery/tek2/OOP/arcade/arcade)
==23262==  If you believe this happened as a result of a stack
==23262==  overflow in your program's main thread (unlikely but
==23262==  possible), you can try to increase the size of the
==23262==  main thread stack using the --main-stacksize= flag.
==23262==  The main thread stack size used in this run was 8388608.
==23262== 
==23262== HEAP SUMMARY:
==23262==     in use at exit: 1,561,428 bytes in 5,511 blocks
==23262==   total heap usage: 34,532 allocs, 29,021 frees, 68,138,078 bytes allocated
==23262== 
==23262== LEAK SUMMARY:
==23262==    definitely lost: 16 bytes in 1 blocks
==23262==    indirectly lost: 176 bytes in 4 blocks
==23262==      possibly lost: 28,035 bytes in 439 blocks
==23262==    still reachable: 1,533,201 bytes in 5,067 blocks
==23262==         suppressed: 0 bytes in 0 blocks
==23262== Rerun with --leak-check=full to see details of leaked memory
==23262== 
==23262== Use --track-origins=yes to see where uninitialised values come from
==23262== For lists of detected and suppressed errors, rerun with: -s
==23262== ERROR SUMMARY: 4 errors from 3 contexts (suppressed: 0 from 0)
